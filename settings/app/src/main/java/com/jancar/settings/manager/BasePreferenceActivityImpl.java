/* * Copyright 2017 JessYan * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.jancar.settings.manager;import android.content.Intent;import android.content.res.Configuration;import android.content.res.Resources;import android.graphics.Color;import android.os.Build;import android.os.Bundle;import android.preference.PreferenceActivity;import android.support.annotation.Nullable;import android.util.DisplayMetrics;import android.util.Log;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.LinearLayout;import android.widget.Toast;import com.jancar.settings.listener.ActivityImpl;import com.jancar.settings.listener.IPresenter;import com.jancar.settings.presenter.NavigationPresenter;import com.jancar.settings.view.activity.SettingsApplication;import com.jancar.settings.view.fragment.BluetoothFragment;import com.jancar.settings.view.fragment.CacheFragment;import com.jancar.settings.view.fragment.DisplayFragment;import com.jancar.settings.view.fragment.NavigationFragment;import com.jancar.settings.view.fragment.OnFragment;import com.jancar.settings.view.fragment.SoundFragment;import com.jancar.settings.view.fragment.SystemFragment;import com.jancar.settings.view.fragment.TimeFragment;import com.jancar.settings.view.fragment.VehicleFragment;import com.jancar.settings.view.fragment.WifiFragment;import com.jancar.settings.view.fragment.WifiSpotFragment;import java.util.List;import java.util.Locale;import butterknife.ButterKnife;import butterknife.Unbinder;/** * ================================================ * PreferenceActivity基类 * ================================================ */public abstract class BasePreferenceActivityImpl<P extends IPresenter> extends PreferenceActivity implements ActivityImpl {    protected final String TAG = this.getClass().getSimpleName();    protected P mPresenter;//如果当前页面逻辑简单, Presenter 可以为 null    /**     * 过滤非法的fragment     */    public List<Header> mCopyHeaders;    private static final String[] ENTRY_FRAGMENTS = {            DisplayFragment.class.getName(), WifiSpotFragment.class.getName(),            WifiFragment.class.getName(), TimeFragment.class.getName(),            CacheFragment.class.getName(), SoundFragment.class.getName(),            NavigationFragment.class.getName(), VehicleFragment.class.getName(),            OnFragment.class.getName(), SystemFragment.class.getName(), BluetoothFragment.class.getName()};    @Override    public void onBuildHeaders(List<Header> target) {        if (mPresenter == null) {            mPresenter = (P) initPresenter();        }        int layoutResID = initResid();        //如果initView返回0,框架则不会调用setContentView(),当然也不会 Bind ButterKnife        if (layoutResID != 0) {            mCopyHeaders = target;            initStatusBar();            loadHeadersFromResource(layoutResID, target);        }    }    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        // initLocaleLanguage();        super.onCreate(savedInstanceState);        initStatusBar();        ((SettingsApplication)getApplication()).setActivity(this);        initData(savedInstanceState);    }    //onStart();    @Override    protected void onStart() {        super.onStart();        initStatusBar();      //  Toast.makeText(this, " ", Toast.LENGTH_SHORT).show();    }    public void initStatusBar() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);            int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");//获取状态栏高度            int statusBarHeight = getResources().getDimensionPixelSize(resourceId);            View rectView = new View(this);//绘制一个和状态栏一样高的矩形，并添加到视图中            LinearLayout.LayoutParams params                    = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, statusBarHeight); ;            rectView.setLayoutParams(params);//设置状态栏颜色            rectView.setBackgroundColor(Color.parseColor("#000000"));//添加矩形View到布局中            ViewGroup decorView = (ViewGroup) getWindow().getDecorView();            decorView.addView(rectView);            ViewGroup rootView = (ViewGroup) ((ViewGroup) this.findViewById(android.R.id.content)).                    getChildAt(0);            rootView.setFitsSystemWindows(true);            rootView.setClipToPadding(true);        }    }    public void initLocaleLanguage() {        Resources resources = getResources();                    // 获得res资源对象        Configuration config = resources.getConfiguration();     // 获得设置对象        DisplayMetrics dm = resources.getDisplayMetrics();        config.locale = Locale.getDefault();        resources.updateConfiguration(config, dm);    }    @Override    protected boolean isValidFragment(String fragmentName) {        for (int i = 0; i < ENTRY_FRAGMENTS.length; i++) {            if (ENTRY_FRAGMENTS[i].equals(fragmentName))                return true;        }        return false;    }    @Override    protected void onDestroy() {        super.onDestroy();        Log.e(TAG, "");        Log.w(TAG, "sdf");        Intent service = new Intent();        service.setClassName("com.jancar.settingss", "com.jancar.settings.service.SettingsUIService");        startService(service);        if (mPresenter != null)            mPresenter.onDestroy();//释放资源        this.mPresenter = null;    }    /**     * 这个Activity是否会使用Fragment,框架会根据这个属性判断是否注册{@link android.support.v4.app.FragmentManager.FragmentLifecycleCallbacks}     * 如果返回false,那意味着这个Activity不需要绑定Fragment,那你再在这个Activity中绑定继承于 {@link BaseFragment} 的Fragment将不起任何作用     *     * @return     */    @Override    public boolean useFragment() {        return true;    }}