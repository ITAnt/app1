package com.jancar.settings.widget;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Matrix;import android.graphics.Paint;import android.graphics.drawable.BitmapDrawable;import android.util.AttributeSet;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.view.WindowManager;import android.widget.Toast;import com.jancar.settings.R;/** * ClassName:DspBalance * * @author Kim * @version 1.0 * @function:平衡调节 * @Date: 2016-6-27 下午2:13:33 * @Copyright: Copyright (c) 2016 */public class DspBalance extends View {    private Paint mHorizontalPaint = new Paint();    private Paint mVerticalPaint = new Paint();    private Paint mVerticalPaints = new Paint();    private Bitmap mObjPoint;    private float mfFad, mfBal;    private float touchX, touchY;    private float mObjWidthParent, mObjHeightParent;    private float centerX, centerY;    private int w_ajust, y_ajust;    private float miDefFad, miDefBal;    private OnTouchListener mObjTouchListener = null;    public DspBalance(Context context) {        super(context);        // TODO Auto-generated constructor stub    }    public static Bitmap resizeBitmap(Bitmap bitmap, int w, int h) {        int width = bitmap.getWidth();        int height = bitmap.getHeight();        float scaleWidth = ((float) w) / width;        float scaleHeight = ((float) h) / height;        Matrix matrix = new Matrix();        matrix.postScale(scaleWidth, scaleHeight);        Bitmap resizedBitmap = Bitmap.createBitmap(bitmap, 0, 0, width,                height, matrix, true);        return resizedBitmap;    }    public DspBalance(Context context, AttributeSet attrs) {        super(context, attrs);        // TODO Auto-generated constructor stub/*		mObjPoint.setWidth(mObjPoint.getWidth()/2);        mObjPoint.setHeight(mObjPoint.get/2);*/        mObjPoint = BitmapFactory.decodeResource(getResources(), R.mipmap.toyota_dsp_seekbar_point);        // mObjPoint.setAntiAlias(true);//消除锯齿        BitmapDrawable bd = new BitmapDrawable(mObjPoint);//接收bitmap        bd.setAntiAlias(true);//消除锯齿        mVerticalPaints.setAntiAlias(true);        mObjPoint = bd.getBitmap();        // bgPaint.setAntiAlias(true);//设置抗锯齿        w_ajust = mObjPoint.getWidth() / 2;        y_ajust = mObjPoint.getHeight() / 2;        mHorizontalPaint.setColor(Color.RED);        mVerticalPaint.setColor(Color.RED);        mHorizontalPaint.setStrokeWidth(2);//这个地方改线宽,单位是像素        mVerticalPaint.setStrokeWidth(2);//这个地方改线宽,单位是像素    }    public void setDefVal(float iMax) {        this.miDefFad = iMax;    }    public void setMaxVal(float iMax) {        this.miDefBal = iMax;    }    public void setBalanceVal(int iBal, int iFad) {        this.move(iBal * this.getWidth() / miDefBal, iFad * getHeight() / miDefFad);        invalidate();        if (mObjTouchListener != null) {            mObjTouchListener.onBalance(iBal, iFad, false);        }    }    public void setBalanceVal(int iBal, int iFad, boolean isFromUser) {        this.move(iBal * this.getWidth() / miDefBal, iFad * getHeight() / miDefFad);        invalidate();        if (mObjTouchListener != null) {            mObjTouchListener.onBalance(iBal, iFad, isFromUser);        }    }    public void updateBalance(float iBal, float iFad) {        //this.move(iBal * this.getWidth() / miDefBal, iFad * getHeight() / miDefFad);        //	Toast.makeText(getContext(), ""+getWidth(), Toast.LENGTH_SHORT).show();     /*   int i = getWidth();        int d = getHeight();*/        this.moves(iBal, iFad);        // this.move(140, 140);        invalidate();    }    public void setBalenceListener(OnTouchListener listener) {        this.mObjTouchListener = listener;    }    @Override    protected void onDraw(Canvas canvas) {        // TODO Auto-generated method stub        super.onDraw(canvas);        canvas.drawLine(getWidth() / 2 + 3, 0, getWidth() / 2 + 3, getHeight(), mVerticalPaint);        canvas.drawLine(0, getHeight() / 2, getWidth(), getHeight() / 2, mHorizontalPaint);        canvas.drawBitmap(mObjPoint, mfBal - mObjPoint.getWidth() / 2, mfFad - mObjPoint.getHeight()                / 2, mVerticalPaints);    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        // TODO Auto-generated method stub        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        int height = getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec);        int width = getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec);       /* mObjWidthParent = width - 2 * w_ajust;        mObjHeightParent = height - 2 * y_ajust;        mfBal = getWidth() / 2 + (miDefBal * mObjWidthParent) / (miDefBal * 2);        mfFad = getHeight() / 2 - (miDefFad * mObjHeightParent) / (miDefFad * 2);*/    }    @Override    public boolean onTouchEvent(MotionEvent event) {        // TODO Auto-generated method stub        float x = event.getX();        float y = event.getY();        switch (event.getAction()) {            case MotionEvent.ACTION_UP:                move(x, y);                invalidate();                if (mObjTouchListener != null) {                    mObjTouchListener.onBalance(centerX * miDefBal / touchX, (centerY) * miDefFad / touchY, true);                }                //   mObjTouchListener.onBalance(mfBal * miDefBal / (getWidth()), mfFad * miDefFad / (getHeight() ),true);                break;            case MotionEvent.ACTION_DOWN:            case MotionEvent.ACTION_MOVE:                move(x, y);                invalidate();                if (mObjTouchListener != null) {                    mObjTouchListener.onBalance(centerX * miDefBal / touchX, (centerY) * miDefFad / touchY, false);                }                break;            default:                break;        }        return true;    }    private void moves(float x, float y) {        if (x > 0) {            if (y > 0) {                touchX = getWidth() - y_ajust;                touchY = getWidth() - y_ajust;            } else {                touchX = getWidth() - y_ajust;                touchY = getWidth() ;            }        } else {            if (y > 0) {                touchX = getWidth();                touchY = getWidth() - y_ajust;            } else {                touchX = getWidth() ;                touchY = getWidth();            }        }        float w=(x+7) * (touchX / miDefBal);        float h= (y+7)  * (touchY/ miDefFad);        if (x > 0) {            if (y > 0) {                centerX=w;                centerY=h;            } else {                centerX=w;                centerY=h+y_ajust;            }        } else {            if (y > 0) {                centerX=w+y_ajust;                centerY=h;            } else {                centerX=w+y_ajust;                centerY=h+y_ajust;            }        }        mfBal=centerX+8;        mfFad=centerY+6;        invalidate();        //  this.move(centerX, centerY);    }    private void move(float x, float y) {        mfBal = x;        mfFad = y;        if (x < w_ajust) {            mfBal = w_ajust;        } else if (x > this.getWidth() - w_ajust) {            mfBal = this.getWidth() - w_ajust;        }        if (y < y_ajust) {            mfFad = w_ajust;        } else if (y > this.getHeight() - y_ajust) {            mfFad = this.getHeight() - y_ajust;        }        if (x > getWidth() / 2) {            touchX = getWidth() - y_ajust;            centerX = mfBal;        } else {            touchX = getWidth();            centerX = mfBal - w_ajust;        }        if (y > getHeight() / 2) {            touchY = getHeight() - y_ajust;            centerY = mfFad;        } else {            centerY = mfFad - y_ajust;            touchY = getHeight();        }    }    public interface OnTouchListener {        void onBalance(float fBal, float fFad, boolean isFromUser);        void onBalance(int fBal, int fFad, boolean isFromUser);    }}